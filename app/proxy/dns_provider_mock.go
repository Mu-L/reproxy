// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package proxy

import (
	"context"
	"sync"

	"github.com/libdns/libdns"
)

// Ensure, that dnsProviderMock does implement dnsProvider.
// If this is not the case, regenerate this file with moq.
var _ dnsProvider = &dnsProviderMock{}

// dnsProviderMock is a mock implementation of dnsProvider.
//
// 	func TestSomethingThatUsesdnsProvider(t *testing.T) {
//
// 		// make and configure a mocked dnsProvider
// 		mockeddnsProvider := &dnsProviderMock{
// 			AppendRecordsFunc: func(ctx context.Context, zone string, recs []libdns.Record) ([]libdns.Record, error) {
// 				panic("mock out the AppendRecords method")
// 			},
// 			DeleteRecordsFunc: func(ctx context.Context, zone string, recs []libdns.Record) ([]libdns.Record, error) {
// 				panic("mock out the DeleteRecords method")
// 			},
// 		}
//
// 		// use mockeddnsProvider in code that requires dnsProvider
// 		// and then make assertions.
//
// 	}
type dnsProviderMock struct {
	// AppendRecordsFunc mocks the AppendRecords method.
	AppendRecordsFunc func(ctx context.Context, zone string, recs []libdns.Record) ([]libdns.Record, error)

	// DeleteRecordsFunc mocks the DeleteRecords method.
	DeleteRecordsFunc func(ctx context.Context, zone string, recs []libdns.Record) ([]libdns.Record, error)

	// calls tracks calls to the methods.
	calls struct {
		// AppendRecords holds details about calls to the AppendRecords method.
		AppendRecords []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Zone is the zone argument value.
			Zone string
			// Recs is the recs argument value.
			Recs []libdns.Record
		}
		// DeleteRecords holds details about calls to the DeleteRecords method.
		DeleteRecords []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Zone is the zone argument value.
			Zone string
			// Recs is the recs argument value.
			Recs []libdns.Record
		}
	}
	lockAppendRecords sync.RWMutex
	lockDeleteRecords sync.RWMutex
}

// AppendRecords calls AppendRecordsFunc.
func (mock *dnsProviderMock) AppendRecords(ctx context.Context, zone string, recs []libdns.Record) ([]libdns.Record, error) {
	if mock.AppendRecordsFunc == nil {
		panic("dnsProviderMock.AppendRecordsFunc: method is nil but dnsProvider.AppendRecords was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Zone string
		Recs []libdns.Record
	}{
		Ctx:  ctx,
		Zone: zone,
		Recs: recs,
	}
	mock.lockAppendRecords.Lock()
	mock.calls.AppendRecords = append(mock.calls.AppendRecords, callInfo)
	mock.lockAppendRecords.Unlock()
	return mock.AppendRecordsFunc(ctx, zone, recs)
}

// AppendRecordsCalls gets all the calls that were made to AppendRecords.
// Check the length with:
//     len(mockeddnsProvider.AppendRecordsCalls())
func (mock *dnsProviderMock) AppendRecordsCalls() []struct {
	Ctx  context.Context
	Zone string
	Recs []libdns.Record
} {
	var calls []struct {
		Ctx  context.Context
		Zone string
		Recs []libdns.Record
	}
	mock.lockAppendRecords.RLock()
	calls = mock.calls.AppendRecords
	mock.lockAppendRecords.RUnlock()
	return calls
}

// DeleteRecords calls DeleteRecordsFunc.
func (mock *dnsProviderMock) DeleteRecords(ctx context.Context, zone string, recs []libdns.Record) ([]libdns.Record, error) {
	if mock.DeleteRecordsFunc == nil {
		panic("dnsProviderMock.DeleteRecordsFunc: method is nil but dnsProvider.DeleteRecords was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Zone string
		Recs []libdns.Record
	}{
		Ctx:  ctx,
		Zone: zone,
		Recs: recs,
	}
	mock.lockDeleteRecords.Lock()
	mock.calls.DeleteRecords = append(mock.calls.DeleteRecords, callInfo)
	mock.lockDeleteRecords.Unlock()
	return mock.DeleteRecordsFunc(ctx, zone, recs)
}

// DeleteRecordsCalls gets all the calls that were made to DeleteRecords.
// Check the length with:
//     len(mockeddnsProvider.DeleteRecordsCalls())
func (mock *dnsProviderMock) DeleteRecordsCalls() []struct {
	Ctx  context.Context
	Zone string
	Recs []libdns.Record
} {
	var calls []struct {
		Ctx  context.Context
		Zone string
		Recs []libdns.Record
	}
	mock.lockDeleteRecords.RLock()
	calls = mock.calls.DeleteRecords
	mock.lockDeleteRecords.RUnlock()
	return calls
}
